"""
This module defines Pydantic schemas related to group invitation tokens
within the Marvin application.

These schemas are used for creating, updating, and representing invitation tokens,
as well as for handling requests and responses for sending email invitations.
"""

from uuid import UUID  # For UUID type hinting

from pydantic import ConfigDict  # Field can be used for more detailed field definitions if needed

from marvin.schemas._marvin import _MarvinModel  # Base Pydantic model


class InviteTokenCreate(_MarvinModel):
    """
    Schema for creating a new group invitation token.
    Specifies the initial number of uses and the group it belongs to.
    """

    uses_left: int  # Renamed from `uses` for clarity, assuming it means uses_left from the start.
    # If `uses` was meant as total allowed uses, the model/logic should reflect that.
    """The number of times this token can be used. Set upon creation."""

    group_id: UUID
    """The unique identifier of the group for which this token is being created."""

    token: str | None = None  # Optional: If provided, uses this token, otherwise one should be generated by service.
    """The token string. If not provided on creation, it should be generated by the service."""

    model_config = ConfigDict(from_attributes=True)  # Allows creating from ORM model attributes


class InviteTokenUpdate(InviteTokenCreate):  # Usually, Update schemas have optional fields.
    """
    Schema for updating an existing group invitation token.
    Currently, this schema inherits all fields from `InviteTokenCreate`,
    implying all fields can be updated. For partial updates, fields
    should ideally be `Optional`. `uses_left` is explicitly added here,
    though it's also in `InviteTokenCreate` (if renamed from `uses`).

    If `uses_left` is the primary field to update (e.g., decrementing),
    this schema might be more focused.
    """

    # Inherits uses_left (if renamed from uses), group_id, token from InviteTokenCreate.
    # If `uses` was distinct from `uses_left`:
    # uses: Optional[int] = None # Total allowed uses, might be updatable.
    uses_left: int  # Explicitly making uses_left updatable.
    """The remaining number of times this token can be used."""
    # group_id and token are usually not updatable for an existing token.


class InviteTokenRead(_MarvinModel):
    """
    Schema for representing a group invitation token when read from the system.
    Includes all details of the token, including its ID and current uses left.
    """

    id: UUID
    """The unique identifier of the invitation token."""
    token: str
    """The unique token string."""
    uses_left: int
    """The remaining number of times this token can be used."""
    group_id: UUID
    """The unique identifier of the group this token belongs to."""

    model_config = ConfigDict(from_attributes=True)


class EmailInvitation(_MarvinModel):
    """
    Schema for the request body when sending an email invitation.
    Contains the recipient's email and the invitation token string.
    """

    email: str
    """The email address to which the invitation should be sent."""
    token: str
    """The invitation token string to be included in the email."""


class EmailInitationResponse(_MarvinModel):  # Initiation typo, consider renaming to EmailInvitationResponse
    """
    Schema for the response after attempting to send an email invitation.
    Indicates success or failure and provides an error message if applicable.
    """

    success: bool
    """True if the email invitation was sent successfully, False otherwise."""
    error: str | None = None
    """An optional error message if the email invitation failed to send."""
