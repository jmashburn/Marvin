version: "3"
env:
  _DEFAULT_GROUP: Home
  PRODUCTION: false
  API_PORT: 8080
  API_DOCS: True
  TOKEN_TIME: 256 # hours
  # mailplit SMTP config
  # start dev:services to use mailpit
  SMTP_HOST: localhost
  SMTP_PORT: 1025
  SMTP_FROM_NAME: MarvinDev
  SMTP_FROM_EMAIL: marvin@example.com
  SMTP_AUTH_STRATEGY: NONE
  BASE_URL: http://localhost:3000
  LANG: en-US
dotenv:
  - .env
  - .dev.env
tasks:
  docs:gen:
    desc: runs the API documentation generator
    cmds:
      - uv run src/dev/code_generation/gen_docs_api.py

  docs:
    desc: runs the documentation server
    dir: docs
    deps:
      - docs:gen
    cmds:
      - uv run -m mkdocs serve

  setup:py:
    desc: Stup python dependencies
    cmds:
      - uv sync --group dev --group postgres
      - uv run pre-commit install
    sources:
      - uv.lock
      - pyproject.toml
      - .pre-commit-config.yaml

  setup:
    desc: Setup all dependencies
    deps:
      - setup:py

  dev:generate:
    desc: Generate the API documentation
    cmds:
      - uv run src/dev/code_generation/main.py
      - task: py:format

  dev:services:
    desc: Starts postgres and mailpit
    dir: docker
    cmds:
      - docker compose -f docker-compose.dev.yml up

  dev:clean:
    desc: Cleans up development environment
    vars:
      DEV_DATA: ""
    cmds:
      - rm -r .src/dev/data/marvin*.db
      - rm -r .src/dev/data/marvin.log
      - rm -r .src/dev/data/.secret

  py:mypy:
    desc: Runs python type checking
    cmds:
      - uv run mypy src/marvin

  py:test:
    desc: runs python tests (support args after '--')
    cmds:
      - uv run pytest {{ .CLI_ARGS }}

  py:format:
    desc: runs python code formater
    cmds:
      - uv run ruff format src/marvin

  py:lint:
    desc: runs python linter
    cmds:
      - uv run ruff check src/marvin

  py:check:
    desc: runs all linters, type checkers and formaters
    deps:
      - py:format
      - py:lint
      - py:mypy
      - py:test

  py:coverage:
    desc: runs python coverage and generates report
    cmds:
      - uv run pytest
      - uv run coverage report -m
      - uv run coveragepy-lcov
      - uv run coverate html
      - open htmlcov/index.html

  py:
    desc: runs the backend server
    cmds:
      - uv run src/marvin/app.py

  py:server:
    desc: Generate a Running Server for webhook tests
    cmds:
      - uv run scripts/server.py 8000 &

  py:migrate:
    desc: generates a new database migration file e.g. task py:migrate -- "add new column"
    cmds:
      - uv run alembic --config src/marvin/alembic.ini revision --autogenerate -m "{{ .CLI_ARGS }}"
      - task: py:format

  docker:prod:
    desc: Builds and runs the production docker image locally
    dir: docker
    cmds:
      - docker compose -f docker-compose.yml -p marvin up -d --build

  docker:uv:
    desc: Build up to uv
    cmds:
      - docker build -f docker/Dockerfile --target production --build-arg="UV_IMAGE=ghcr.io/astral-sh/uv" --tag=marvin:latest .
